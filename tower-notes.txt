ntower/3
ntower/3 is a predicate that solves the Towers puzzle using the GNU Prolog 
finite domain solver. It ensures that every row and column contains all 
integers from 1 through N and that the specified tower counts are met.

Arguments:
N: Nonnegative integer specifying the size of the square grid.
T: List of N lists, each representing a row of the square grid. Each 
    row contains N distinct integers from 1 to N.
C: Structure with function symbol counts and arity 4. Its arguments 
    are lists of N integers representing the tower counts for the top, 
    bottom, left, and right edges.

Example Usage:
?- ntower(5,
          [[2,3,4,5,1],
           [5,4,1,3,2],
           [4,1,5,2,3],
           [1,2,3,4,5],
           [3,5,2,1,4]],
          C).
C = counts([2,3,2,1,4],
           [3,1,3,3,2],
           [4,1,2,5,2],
           [2,4,2,1,2]).

========================================================================
plain_ntower/3
plain_ntower/3 is a predicate that solves the Towers puzzle without using 
the GNU Prolog finite domain solver. It enumerates the possible integer 
solutions using standard Prolog primitives such as member/2 and is/2.

Arguments:
N: Nonnegative integer specifying the size of the square grid.
T: List of N lists, each representing a row of the square grid. Each row 
    contains N distinct integers from 1 to N.
C: Structure with function symbol counts and arity 4. Its arguments are 
    lists of N integers representing the tower counts for the top, bottom, 
    left, and right edges.

Example Usage:
?- plain_ntower(5,
                [[2,3,4,5,1],
                 [5,4,1,3,2],
                 [4,1,5,2,3],
                 [1,2,3,4,5],
                 [3,5,2,1,4]],
                C).
C = counts([2,3,2,1,4],
           [3,1,3,3,2],
           [4,1,2,5,2],
           [2,4,2,1,2]).

========================================================================
speedup/1
speedup/1 is a predicate that compares the performance of ntower/3 and 
plain_ntower/3 by measuring the CPU time taken by each and unifying the 
argument to the floating-point ratio of plain_ntower/3's total CPU time 
to ntower/3's total CPU time.

Example Usage:
?- speedup(Ratio).
Ratio = <computed_ratio>.

========================================================================
ambiguous/4
ambiguous/4 is a predicate that finds a single NÃ—N Towers puzzle with 
edges C that has two distinct solutions T1 and T2.

Arguments:
N: Nonnegative integer specifying the size of the square grid.
C: Structure with function symbol counts and arity 4. Its arguments are 
    lists of N integers representing the tower counts for the top, 
    bottom, left, and right edges.
T1: First solution, a list of N lists representing the grid.
T2: Second solution, a list of N lists representing the grid.

Example Usage:
?- ambiguous(5, C, T1, T2).
C = counts(...),
T1 = [...],
T2 = [...],
T1 \= T2.

========================================================================
Performance Comparison
plain_ntower vs. ntower Speedup
I ran the following command to get the ratio of plain_ntower latency 
to ntower latency:

?- speedup(Ratio).

This uses the following test case, which must generate a solved puzzle 
given the counts:

ntower(5, T,
     counts([2,3,2,1,4],
            [3,1,3,3,2],
            [4,1,2,5,2],
            [2,4,2,1,2])).

Ratio = 801.0 ?

The plain_ntower solution performed significantly worse, taking 801.0 times
as long as ntower, which utilizes various finite domain solver functions.

========================================================================
Ambiguous Puzzle
I used the following command to generate an ambiguous Towers puzzle:
    ?- ambiguous(5, C, T1, T2).

C = counts([5,4,2,2,1],[1,2,3,2,3],[4,3,3,2,1],[1,2,2,4,3])
T1 = [[1,2,4,3,5],[2,3,5,1,4],[3,4,1,5,2],[4,5,3,2,1],[5,1,2,4,3]]
T2 = [[1,2,4,3,5],[2,3,1,5,4],[3,4,5,1,2],[4,5,3,2,1],[5,1,2,4,3]] ? 

